//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;

namespace zVirtualScenesModel
{
    
    public partial class device_values : INotifyPropertyChanged
    {
    	public event PropertyChangedEventHandler PropertyChanged;
        protected void NotifyPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }
    
        public device_values()
        {
            this.device_value_triggers = new ObservableCollection<device_value_triggers>();
        }
    
    	private int _id;
        public int id {
    		get { 
    			return _id;
    		} 
    		set {
    			if (value != _id){
    			    int old = _id;
    				BeforeidChange(old, value);
    				_id = value;
    			    NotifyPropertyChanged("id");
    				AfteridChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeidChange(int oldValue, int newValue);
    	partial void AfteridChange(int oldValue, int newValue);
    
    	private int _device_id;
        public int device_id {
    		get { 
    			return _device_id;
    		} 
    		set {
    			if (value != _device_id){
    			    int old = _device_id;
    				Beforedevice_idChange(old, value);
    				_device_id = value;
    			    NotifyPropertyChanged("device_id");
    				Afterdevice_idChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforedevice_idChange(int oldValue, int newValue);
    	partial void Afterdevice_idChange(int oldValue, int newValue);
    
    	private string _value_id;
        public string value_id {
    		get { 
    			return _value_id;
    		} 
    		set {
    			if (value != _value_id){
    			    string old = _value_id;
    				Beforevalue_idChange(old, value);
    				_value_id = value;
    			    NotifyPropertyChanged("value_id");
    				Aftervalue_idChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforevalue_idChange(string oldValue, string newValue);
    	partial void Aftervalue_idChange(string oldValue, string newValue);
    
    	private string _label_name;
        public string label_name {
    		get { 
    			return _label_name;
    		} 
    		set {
    			if (value != _label_name){
    			    string old = _label_name;
    				Beforelabel_nameChange(old, value);
    				_label_name = value;
    			    NotifyPropertyChanged("label_name");
    				Afterlabel_nameChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforelabel_nameChange(string oldValue, string newValue);
    	partial void Afterlabel_nameChange(string oldValue, string newValue);
    
    	private string _genre;
        public string genre {
    		get { 
    			return _genre;
    		} 
    		set {
    			if (value != _genre){
    			    string old = _genre;
    				BeforegenreChange(old, value);
    				_genre = value;
    			    NotifyPropertyChanged("genre");
    				AftergenreChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforegenreChange(string oldValue, string newValue);
    	partial void AftergenreChange(string oldValue, string newValue);
    
    	private string _index2;
        public string index2 {
    		get { 
    			return _index2;
    		} 
    		set {
    			if (value != _index2){
    			    string old = _index2;
    				Beforeindex2Change(old, value);
    				_index2 = value;
    			    NotifyPropertyChanged("index2");
    				Afterindex2Change(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforeindex2Change(string oldValue, string newValue);
    	partial void Afterindex2Change(string oldValue, string newValue);
    
    	private string _type;
        public string type {
    		get { 
    			return _type;
    		} 
    		set {
    			if (value != _type){
    			    string old = _type;
    				BeforetypeChange(old, value);
    				_type = value;
    			    NotifyPropertyChanged("type");
    				AftertypeChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforetypeChange(string oldValue, string newValue);
    	partial void AftertypeChange(string oldValue, string newValue);
    
    	private string _commandClassId;
        public string commandClassId {
    		get { 
    			return _commandClassId;
    		} 
    		set {
    			if (value != _commandClassId){
    			    string old = _commandClassId;
    				BeforecommandClassIdChange(old, value);
    				_commandClassId = value;
    			    NotifyPropertyChanged("commandClassId");
    				AftercommandClassIdChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforecommandClassIdChange(string oldValue, string newValue);
    	partial void AftercommandClassIdChange(string oldValue, string newValue);
    
    	private string _value2;
        public string value2 {
    		get { 
    			return _value2;
    		} 
    		set {
    			if (value != _value2){
    			    string old = _value2;
    				Beforevalue2Change(old, value);
    				_value2 = value;
    			    NotifyPropertyChanged("value2");
    				Aftervalue2Change(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforevalue2Change(string oldValue, string newValue);
    	partial void Aftervalue2Change(string oldValue, string newValue);
    
    	private bool _read_only;
        public bool read_only {
    		get { 
    			return _read_only;
    		} 
    		set {
    			if (value != _read_only){
    			    bool old = _read_only;
    				Beforeread_onlyChange(old, value);
    				_read_only = value;
    			    NotifyPropertyChanged("read_only");
    				Afterread_onlyChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforeread_onlyChange(bool oldValue, bool newValue);
    	partial void Afterread_onlyChange(bool oldValue, bool newValue);
    
    
    	private ObservableCollection<device_value_triggers> _device_value_triggers;
        public virtual ObservableCollection<device_value_triggers> device_value_triggers {
    		get { 
    			return _device_value_triggers;
    		} 
    		set {
    			if (value != _device_value_triggers){
    			    ObservableCollection<device_value_triggers> old = _device_value_triggers;
    				Beforedevice_value_triggersChange(old, value);
    				_device_value_triggers = value;
    			    NotifyPropertyChanged("device_value_triggers");
    				Afterdevice_value_triggersChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforedevice_value_triggersChange(ObservableCollection<device_value_triggers> oldValue, ObservableCollection<device_value_triggers> newValue);
    	partial void Afterdevice_value_triggersChange(ObservableCollection<device_value_triggers> oldValue, ObservableCollection<device_value_triggers> newValue);
    
    	private device _device;
        public virtual device device {
    		get { 
    			return _device;
    		} 
    		set {
    			if (value != _device){
    			    device old = _device;
    				BeforedeviceChange(old, value);
    				_device = value;
    			    NotifyPropertyChanged("device");
    				AfterdeviceChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforedeviceChange(device oldValue, device newValue);
    	partial void AfterdeviceChange(device oldValue, device newValue);
    }
}
