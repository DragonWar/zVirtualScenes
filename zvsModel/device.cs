//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace zVirtualScenesModel
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;

    public partial class device : INotifyPropertyChanged 
    {
        public device()
        {
            this.device_command_que = new ObservableCollection<device_command_que>();
            this.device_commands = new ObservableCollection<device_commands>();
            this.device_property_values = new ObservableCollection<device_property_values>();
            this.device_type_command_que = new ObservableCollection<device_type_command_que>();
            this.device_values = new ObservableCollection<device_values>();
            this.group_devices = new ObservableCollection<group_devices>();
            this.scene_commands = new ObservableCollection<scene_commands>();
        }

        private int _id;
        public int id
        {
            get { return _id; }
            set
            {
                _id = value;
                NotifyPropertyChanged("id");
            }
        }
               
        private int _device_type_id;
        public int device_type_id
        {
            get { return _device_type_id; }
            set
            {
                _device_type_id = value;
                NotifyPropertyChanged("device_type_id");
            }
        }

        private int _node_id = 0;
        public int node_id
        {
            get { return _node_id; }
            set
            {
                _node_id = value;
                NotifyPropertyChanged("node_id");
            }
        }
        
        private string _current_level_txt = string.Empty;
        public string current_level_txt
        {
            get { return _current_level_txt; }
            set
            {
                _current_level_txt = value;
                NotifyPropertyChanged("current_level_txt");
            }
        }

        private int _current_level_int = 0;
        public int current_level_int
        {
            get { return _current_level_int; }
            set
            {
                _current_level_int = value;
                NotifyPropertyChanged("current_level_int");
            }
        }

        private string _friendly_name = string.Empty;
        public string friendly_name
        {
            get { return _friendly_name; }
            set
            {
                _friendly_name = value;
                NotifyPropertyChanged("friendly_name");
            }
        }

        private Nullable<System.DateTime> _last_heard_from;
        public Nullable<System.DateTime> last_heard_from
        {
            get { return _last_heard_from; }
            set
            {
                _last_heard_from = value;
                NotifyPropertyChanged("last_heard_from");
            }
        }
        
        public virtual ObservableCollection<device_command_que> device_command_que { get; set; }
        public virtual ObservableCollection<device_commands> device_commands { get; set; }
        public virtual ObservableCollection<device_property_values> device_property_values { get; set; }
        public virtual ObservableCollection<device_type_command_que> device_type_command_que { get; set; }
        public virtual device_types device_types { get; set; }
        public virtual ObservableCollection<device_values> device_values { get; set; }
        public virtual ObservableCollection<group_devices> group_devices { get; set; }
        public virtual ObservableCollection<scene_commands> scene_commands { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;
        private void NotifyPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }
    }
}
