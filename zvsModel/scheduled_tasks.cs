//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections.ObjectModel;

namespace zVirtualScenesModel
{
    
    public partial class scheduled_tasks : INotifyPropertyChanged
    {
    	public event PropertyChangedEventHandler PropertyChanged;
        protected void NotifyPropertyChanged(string name)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(name));
            }
        }
    
    
    	private int _id;
        public int id {
    		get { 
    			return _id;
    		} 
    		set {
    			if (value != _id){
    			    int old = _id;
    				BeforeidChange(old, value);
    				_id = value;
    			    NotifyPropertyChanged("id");
    				AfteridChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeidChange(int oldValue, int newValue);
    	partial void AfteridChange(int oldValue, int newValue);
    
    	private Nullable<int> _SceneID;
        public Nullable<int> SceneID {
    		get { 
    			return _SceneID;
    		} 
    		set {
    			if (value != _SceneID){
    			    Nullable<int> old = _SceneID;
    				BeforeSceneIDChange(old, value);
    				_SceneID = value;
    			    NotifyPropertyChanged("SceneID");
    				AfterSceneIDChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeSceneIDChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterSceneIDChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<int> _Frequency;
        public Nullable<int> Frequency {
    		get { 
    			return _Frequency;
    		} 
    		set {
    			if (value != _Frequency){
    			    Nullable<int> old = _Frequency;
    				BeforeFrequencyChange(old, value);
    				_Frequency = value;
    			    NotifyPropertyChanged("Frequency");
    				AfterFrequencyChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeFrequencyChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterFrequencyChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private string _friendly_name;
        public string friendly_name {
    		get { 
    			return _friendly_name;
    		} 
    		set {
    			if (value != _friendly_name){
    			    string old = _friendly_name;
    				Beforefriendly_nameChange(old, value);
    				_friendly_name = value;
    			    NotifyPropertyChanged("friendly_name");
    				Afterfriendly_nameChange(old, value);
    			}
    		}
    	 } 
    
    	partial void Beforefriendly_nameChange(string oldValue, string newValue);
    	partial void Afterfriendly_nameChange(string oldValue, string newValue);
    
    	private bool _isEnabled;
        public bool isEnabled {
    		get { 
    			return _isEnabled;
    		} 
    		set {
    			if (value != _isEnabled){
    			    bool old = _isEnabled;
    				BeforeisEnabledChange(old, value);
    				_isEnabled = value;
    			    NotifyPropertyChanged("isEnabled");
    				AfterisEnabledChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeisEnabledChange(bool oldValue, bool newValue);
    	partial void AfterisEnabledChange(bool oldValue, bool newValue);
    
    	private Nullable<System.DateTime> _startTime;
        public Nullable<System.DateTime> startTime {
    		get { 
    			return _startTime;
    		} 
    		set {
    			if (value != _startTime){
    			    Nullable<System.DateTime> old = _startTime;
    				BeforestartTimeChange(old, value);
    				_startTime = value;
    			    NotifyPropertyChanged("startTime");
    				AfterstartTimeChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforestartTimeChange(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> newValue);
    	partial void AfterstartTimeChange(Nullable<System.DateTime> oldValue, Nullable<System.DateTime> newValue);
    
    	private Nullable<int> _sortOrder;
        public Nullable<int> sortOrder {
    		get { 
    			return _sortOrder;
    		} 
    		set {
    			if (value != _sortOrder){
    			    Nullable<int> old = _sortOrder;
    				BeforesortOrderChange(old, value);
    				_sortOrder = value;
    			    NotifyPropertyChanged("sortOrder");
    				AftersortOrderChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforesortOrderChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AftersortOrderChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<bool> _RecurMonday;
        public Nullable<bool> RecurMonday {
    		get { 
    			return _RecurMonday;
    		} 
    		set {
    			if (value != _RecurMonday){
    			    Nullable<bool> old = _RecurMonday;
    				BeforeRecurMondayChange(old, value);
    				_RecurMonday = value;
    			    NotifyPropertyChanged("RecurMonday");
    				AfterRecurMondayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurMondayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurMondayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurTuesday;
        public Nullable<bool> RecurTuesday {
    		get { 
    			return _RecurTuesday;
    		} 
    		set {
    			if (value != _RecurTuesday){
    			    Nullable<bool> old = _RecurTuesday;
    				BeforeRecurTuesdayChange(old, value);
    				_RecurTuesday = value;
    			    NotifyPropertyChanged("RecurTuesday");
    				AfterRecurTuesdayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurTuesdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurTuesdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurWednesday;
        public Nullable<bool> RecurWednesday {
    		get { 
    			return _RecurWednesday;
    		} 
    		set {
    			if (value != _RecurWednesday){
    			    Nullable<bool> old = _RecurWednesday;
    				BeforeRecurWednesdayChange(old, value);
    				_RecurWednesday = value;
    			    NotifyPropertyChanged("RecurWednesday");
    				AfterRecurWednesdayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurWednesdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurWednesdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurThursday;
        public Nullable<bool> RecurThursday {
    		get { 
    			return _RecurThursday;
    		} 
    		set {
    			if (value != _RecurThursday){
    			    Nullable<bool> old = _RecurThursday;
    				BeforeRecurThursdayChange(old, value);
    				_RecurThursday = value;
    			    NotifyPropertyChanged("RecurThursday");
    				AfterRecurThursdayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurThursdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurThursdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurFriday;
        public Nullable<bool> RecurFriday {
    		get { 
    			return _RecurFriday;
    		} 
    		set {
    			if (value != _RecurFriday){
    			    Nullable<bool> old = _RecurFriday;
    				BeforeRecurFridayChange(old, value);
    				_RecurFriday = value;
    			    NotifyPropertyChanged("RecurFriday");
    				AfterRecurFridayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurFridayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurFridayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurSaturday;
        public Nullable<bool> RecurSaturday {
    		get { 
    			return _RecurSaturday;
    		} 
    		set {
    			if (value != _RecurSaturday){
    			    Nullable<bool> old = _RecurSaturday;
    				BeforeRecurSaturdayChange(old, value);
    				_RecurSaturday = value;
    			    NotifyPropertyChanged("RecurSaturday");
    				AfterRecurSaturdayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurSaturdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurSaturdayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurSunday;
        public Nullable<bool> RecurSunday {
    		get { 
    			return _RecurSunday;
    		} 
    		set {
    			if (value != _RecurSunday){
    			    Nullable<bool> old = _RecurSunday;
    				BeforeRecurSundayChange(old, value);
    				_RecurSunday = value;
    			    NotifyPropertyChanged("RecurSunday");
    				AfterRecurSundayChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurSundayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurSundayChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<int> _RecurDays;
        public Nullable<int> RecurDays {
    		get { 
    			return _RecurDays;
    		} 
    		set {
    			if (value != _RecurDays){
    			    Nullable<int> old = _RecurDays;
    				BeforeRecurDaysChange(old, value);
    				_RecurDays = value;
    			    NotifyPropertyChanged("RecurDays");
    				AfterRecurDaysChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDaysChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterRecurDaysChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<int> _RecurWeeks;
        public Nullable<int> RecurWeeks {
    		get { 
    			return _RecurWeeks;
    		} 
    		set {
    			if (value != _RecurWeeks){
    			    Nullable<int> old = _RecurWeeks;
    				BeforeRecurWeeksChange(old, value);
    				_RecurWeeks = value;
    			    NotifyPropertyChanged("RecurWeeks");
    				AfterRecurWeeksChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurWeeksChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterRecurWeeksChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<int> _RecurMonth;
        public Nullable<int> RecurMonth {
    		get { 
    			return _RecurMonth;
    		} 
    		set {
    			if (value != _RecurMonth){
    			    Nullable<int> old = _RecurMonth;
    				BeforeRecurMonthChange(old, value);
    				_RecurMonth = value;
    			    NotifyPropertyChanged("RecurMonth");
    				AfterRecurMonthChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurMonthChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterRecurMonthChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<int> _RecurDayofMonth;
        public Nullable<int> RecurDayofMonth {
    		get { 
    			return _RecurDayofMonth;
    		} 
    		set {
    			if (value != _RecurDayofMonth){
    			    Nullable<int> old = _RecurDayofMonth;
    				BeforeRecurDayofMonthChange(old, value);
    				_RecurDayofMonth = value;
    			    NotifyPropertyChanged("RecurDayofMonth");
    				AfterRecurDayofMonthChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDayofMonthChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterRecurDayofMonthChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<int> _RecurSeconds;
        public Nullable<int> RecurSeconds {
    		get { 
    			return _RecurSeconds;
    		} 
    		set {
    			if (value != _RecurSeconds){
    			    Nullable<int> old = _RecurSeconds;
    				BeforeRecurSecondsChange(old, value);
    				_RecurSeconds = value;
    			    NotifyPropertyChanged("RecurSeconds");
    				AfterRecurSecondsChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurSecondsChange(Nullable<int> oldValue, Nullable<int> newValue);
    	partial void AfterRecurSecondsChange(Nullable<int> oldValue, Nullable<int> newValue);
    
    	private Nullable<bool> _RecurEven;
        public Nullable<bool> RecurEven {
    		get { 
    			return _RecurEven;
    		} 
    		set {
    			if (value != _RecurEven){
    			    Nullable<bool> old = _RecurEven;
    				BeforeRecurEvenChange(old, value);
    				_RecurEven = value;
    			    NotifyPropertyChanged("RecurEven");
    				AfterRecurEvenChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurEvenChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurEvenChange(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay01;
        public Nullable<bool> RecurDay01 {
    		get { 
    			return _RecurDay01;
    		} 
    		set {
    			if (value != _RecurDay01){
    			    Nullable<bool> old = _RecurDay01;
    				BeforeRecurDay01Change(old, value);
    				_RecurDay01 = value;
    			    NotifyPropertyChanged("RecurDay01");
    				AfterRecurDay01Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay01Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay01Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay02;
        public Nullable<bool> RecurDay02 {
    		get { 
    			return _RecurDay02;
    		} 
    		set {
    			if (value != _RecurDay02){
    			    Nullable<bool> old = _RecurDay02;
    				BeforeRecurDay02Change(old, value);
    				_RecurDay02 = value;
    			    NotifyPropertyChanged("RecurDay02");
    				AfterRecurDay02Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay02Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay02Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay03;
        public Nullable<bool> RecurDay03 {
    		get { 
    			return _RecurDay03;
    		} 
    		set {
    			if (value != _RecurDay03){
    			    Nullable<bool> old = _RecurDay03;
    				BeforeRecurDay03Change(old, value);
    				_RecurDay03 = value;
    			    NotifyPropertyChanged("RecurDay03");
    				AfterRecurDay03Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay03Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay03Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay04;
        public Nullable<bool> RecurDay04 {
    		get { 
    			return _RecurDay04;
    		} 
    		set {
    			if (value != _RecurDay04){
    			    Nullable<bool> old = _RecurDay04;
    				BeforeRecurDay04Change(old, value);
    				_RecurDay04 = value;
    			    NotifyPropertyChanged("RecurDay04");
    				AfterRecurDay04Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay04Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay04Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay05;
        public Nullable<bool> RecurDay05 {
    		get { 
    			return _RecurDay05;
    		} 
    		set {
    			if (value != _RecurDay05){
    			    Nullable<bool> old = _RecurDay05;
    				BeforeRecurDay05Change(old, value);
    				_RecurDay05 = value;
    			    NotifyPropertyChanged("RecurDay05");
    				AfterRecurDay05Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay05Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay05Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay06;
        public Nullable<bool> RecurDay06 {
    		get { 
    			return _RecurDay06;
    		} 
    		set {
    			if (value != _RecurDay06){
    			    Nullable<bool> old = _RecurDay06;
    				BeforeRecurDay06Change(old, value);
    				_RecurDay06 = value;
    			    NotifyPropertyChanged("RecurDay06");
    				AfterRecurDay06Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay06Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay06Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay07;
        public Nullable<bool> RecurDay07 {
    		get { 
    			return _RecurDay07;
    		} 
    		set {
    			if (value != _RecurDay07){
    			    Nullable<bool> old = _RecurDay07;
    				BeforeRecurDay07Change(old, value);
    				_RecurDay07 = value;
    			    NotifyPropertyChanged("RecurDay07");
    				AfterRecurDay07Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay07Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay07Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay08;
        public Nullable<bool> RecurDay08 {
    		get { 
    			return _RecurDay08;
    		} 
    		set {
    			if (value != _RecurDay08){
    			    Nullable<bool> old = _RecurDay08;
    				BeforeRecurDay08Change(old, value);
    				_RecurDay08 = value;
    			    NotifyPropertyChanged("RecurDay08");
    				AfterRecurDay08Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay08Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay08Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay09;
        public Nullable<bool> RecurDay09 {
    		get { 
    			return _RecurDay09;
    		} 
    		set {
    			if (value != _RecurDay09){
    			    Nullable<bool> old = _RecurDay09;
    				BeforeRecurDay09Change(old, value);
    				_RecurDay09 = value;
    			    NotifyPropertyChanged("RecurDay09");
    				AfterRecurDay09Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay09Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay09Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay10;
        public Nullable<bool> RecurDay10 {
    		get { 
    			return _RecurDay10;
    		} 
    		set {
    			if (value != _RecurDay10){
    			    Nullable<bool> old = _RecurDay10;
    				BeforeRecurDay10Change(old, value);
    				_RecurDay10 = value;
    			    NotifyPropertyChanged("RecurDay10");
    				AfterRecurDay10Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay10Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay10Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay11;
        public Nullable<bool> RecurDay11 {
    		get { 
    			return _RecurDay11;
    		} 
    		set {
    			if (value != _RecurDay11){
    			    Nullable<bool> old = _RecurDay11;
    				BeforeRecurDay11Change(old, value);
    				_RecurDay11 = value;
    			    NotifyPropertyChanged("RecurDay11");
    				AfterRecurDay11Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay11Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay11Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay12;
        public Nullable<bool> RecurDay12 {
    		get { 
    			return _RecurDay12;
    		} 
    		set {
    			if (value != _RecurDay12){
    			    Nullable<bool> old = _RecurDay12;
    				BeforeRecurDay12Change(old, value);
    				_RecurDay12 = value;
    			    NotifyPropertyChanged("RecurDay12");
    				AfterRecurDay12Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay12Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay12Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay13;
        public Nullable<bool> RecurDay13 {
    		get { 
    			return _RecurDay13;
    		} 
    		set {
    			if (value != _RecurDay13){
    			    Nullable<bool> old = _RecurDay13;
    				BeforeRecurDay13Change(old, value);
    				_RecurDay13 = value;
    			    NotifyPropertyChanged("RecurDay13");
    				AfterRecurDay13Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay13Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay13Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay14;
        public Nullable<bool> RecurDay14 {
    		get { 
    			return _RecurDay14;
    		} 
    		set {
    			if (value != _RecurDay14){
    			    Nullable<bool> old = _RecurDay14;
    				BeforeRecurDay14Change(old, value);
    				_RecurDay14 = value;
    			    NotifyPropertyChanged("RecurDay14");
    				AfterRecurDay14Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay14Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay14Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay15;
        public Nullable<bool> RecurDay15 {
    		get { 
    			return _RecurDay15;
    		} 
    		set {
    			if (value != _RecurDay15){
    			    Nullable<bool> old = _RecurDay15;
    				BeforeRecurDay15Change(old, value);
    				_RecurDay15 = value;
    			    NotifyPropertyChanged("RecurDay15");
    				AfterRecurDay15Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay15Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay15Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay16;
        public Nullable<bool> RecurDay16 {
    		get { 
    			return _RecurDay16;
    		} 
    		set {
    			if (value != _RecurDay16){
    			    Nullable<bool> old = _RecurDay16;
    				BeforeRecurDay16Change(old, value);
    				_RecurDay16 = value;
    			    NotifyPropertyChanged("RecurDay16");
    				AfterRecurDay16Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay16Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay16Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay17;
        public Nullable<bool> RecurDay17 {
    		get { 
    			return _RecurDay17;
    		} 
    		set {
    			if (value != _RecurDay17){
    			    Nullable<bool> old = _RecurDay17;
    				BeforeRecurDay17Change(old, value);
    				_RecurDay17 = value;
    			    NotifyPropertyChanged("RecurDay17");
    				AfterRecurDay17Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay17Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay17Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay18;
        public Nullable<bool> RecurDay18 {
    		get { 
    			return _RecurDay18;
    		} 
    		set {
    			if (value != _RecurDay18){
    			    Nullable<bool> old = _RecurDay18;
    				BeforeRecurDay18Change(old, value);
    				_RecurDay18 = value;
    			    NotifyPropertyChanged("RecurDay18");
    				AfterRecurDay18Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay18Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay18Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay19;
        public Nullable<bool> RecurDay19 {
    		get { 
    			return _RecurDay19;
    		} 
    		set {
    			if (value != _RecurDay19){
    			    Nullable<bool> old = _RecurDay19;
    				BeforeRecurDay19Change(old, value);
    				_RecurDay19 = value;
    			    NotifyPropertyChanged("RecurDay19");
    				AfterRecurDay19Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay19Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay19Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay20;
        public Nullable<bool> RecurDay20 {
    		get { 
    			return _RecurDay20;
    		} 
    		set {
    			if (value != _RecurDay20){
    			    Nullable<bool> old = _RecurDay20;
    				BeforeRecurDay20Change(old, value);
    				_RecurDay20 = value;
    			    NotifyPropertyChanged("RecurDay20");
    				AfterRecurDay20Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay20Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay20Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay21;
        public Nullable<bool> RecurDay21 {
    		get { 
    			return _RecurDay21;
    		} 
    		set {
    			if (value != _RecurDay21){
    			    Nullable<bool> old = _RecurDay21;
    				BeforeRecurDay21Change(old, value);
    				_RecurDay21 = value;
    			    NotifyPropertyChanged("RecurDay21");
    				AfterRecurDay21Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay21Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay21Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay22;
        public Nullable<bool> RecurDay22 {
    		get { 
    			return _RecurDay22;
    		} 
    		set {
    			if (value != _RecurDay22){
    			    Nullable<bool> old = _RecurDay22;
    				BeforeRecurDay22Change(old, value);
    				_RecurDay22 = value;
    			    NotifyPropertyChanged("RecurDay22");
    				AfterRecurDay22Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay22Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay22Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay23;
        public Nullable<bool> RecurDay23 {
    		get { 
    			return _RecurDay23;
    		} 
    		set {
    			if (value != _RecurDay23){
    			    Nullable<bool> old = _RecurDay23;
    				BeforeRecurDay23Change(old, value);
    				_RecurDay23 = value;
    			    NotifyPropertyChanged("RecurDay23");
    				AfterRecurDay23Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay23Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay23Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay24;
        public Nullable<bool> RecurDay24 {
    		get { 
    			return _RecurDay24;
    		} 
    		set {
    			if (value != _RecurDay24){
    			    Nullable<bool> old = _RecurDay24;
    				BeforeRecurDay24Change(old, value);
    				_RecurDay24 = value;
    			    NotifyPropertyChanged("RecurDay24");
    				AfterRecurDay24Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay24Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay24Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay25;
        public Nullable<bool> RecurDay25 {
    		get { 
    			return _RecurDay25;
    		} 
    		set {
    			if (value != _RecurDay25){
    			    Nullable<bool> old = _RecurDay25;
    				BeforeRecurDay25Change(old, value);
    				_RecurDay25 = value;
    			    NotifyPropertyChanged("RecurDay25");
    				AfterRecurDay25Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay25Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay25Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay26;
        public Nullable<bool> RecurDay26 {
    		get { 
    			return _RecurDay26;
    		} 
    		set {
    			if (value != _RecurDay26){
    			    Nullable<bool> old = _RecurDay26;
    				BeforeRecurDay26Change(old, value);
    				_RecurDay26 = value;
    			    NotifyPropertyChanged("RecurDay26");
    				AfterRecurDay26Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay26Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay26Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay27;
        public Nullable<bool> RecurDay27 {
    		get { 
    			return _RecurDay27;
    		} 
    		set {
    			if (value != _RecurDay27){
    			    Nullable<bool> old = _RecurDay27;
    				BeforeRecurDay27Change(old, value);
    				_RecurDay27 = value;
    			    NotifyPropertyChanged("RecurDay27");
    				AfterRecurDay27Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay27Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay27Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay28;
        public Nullable<bool> RecurDay28 {
    		get { 
    			return _RecurDay28;
    		} 
    		set {
    			if (value != _RecurDay28){
    			    Nullable<bool> old = _RecurDay28;
    				BeforeRecurDay28Change(old, value);
    				_RecurDay28 = value;
    			    NotifyPropertyChanged("RecurDay28");
    				AfterRecurDay28Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay28Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay28Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay29;
        public Nullable<bool> RecurDay29 {
    		get { 
    			return _RecurDay29;
    		} 
    		set {
    			if (value != _RecurDay29){
    			    Nullable<bool> old = _RecurDay29;
    				BeforeRecurDay29Change(old, value);
    				_RecurDay29 = value;
    			    NotifyPropertyChanged("RecurDay29");
    				AfterRecurDay29Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay29Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay29Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay30;
        public Nullable<bool> RecurDay30 {
    		get { 
    			return _RecurDay30;
    		} 
    		set {
    			if (value != _RecurDay30){
    			    Nullable<bool> old = _RecurDay30;
    				BeforeRecurDay30Change(old, value);
    				_RecurDay30 = value;
    			    NotifyPropertyChanged("RecurDay30");
    				AfterRecurDay30Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay30Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay30Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    	private Nullable<bool> _RecurDay31;
        public Nullable<bool> RecurDay31 {
    		get { 
    			return _RecurDay31;
    		} 
    		set {
    			if (value != _RecurDay31){
    			    Nullable<bool> old = _RecurDay31;
    				BeforeRecurDay31Change(old, value);
    				_RecurDay31 = value;
    			    NotifyPropertyChanged("RecurDay31");
    				AfterRecurDay31Change(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforeRecurDay31Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    	partial void AfterRecurDay31Change(Nullable<bool> oldValue, Nullable<bool> newValue);
    
    
    	private scene _scene;
        public virtual scene scene {
    		get { 
    			return _scene;
    		} 
    		set {
    			if (value != _scene){
    			    scene old = _scene;
    				BeforesceneChange(old, value);
    				_scene = value;
    			    NotifyPropertyChanged("scene");
    				AftersceneChange(old, value);
    			}
    		}
    	 } 
    
    	partial void BeforesceneChange(scene oldValue, scene newValue);
    	partial void AftersceneChange(scene oldValue, scene newValue);
    }
}
